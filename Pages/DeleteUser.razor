@page "/users/delete/{Id:int}"
@using PruebaFront.DTOs
@using PruebaFront.Services
@inject UserService UserService
@inject NavigationManager NavigationManager

<h3>Delete User</h3>

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="alert alert-danger">
        <h4>Are you sure you want to delete this user?</h4>
        <p>This action cannot be undone.</p>
    </div>

    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">@user.FullName</h5>
            <p class="card-text">Document ID: @user.DocumentID</p>
            <p class="card-text">Phone: @user.TellNumber</p>
            <p class="card-text">Address: @user.Address</p>
            <p class="card-text">Birth Date: @user.BirthDay</p>
        </div>
    </div>

    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
    <button class="btn btn-secondary" @onclick="Cancel">Cancel</button>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private UserResponseDTO user;

    protected override async Task OnInitializedAsync()
    {
        var users = await UserService.GetAllUsers();
        user = users.FirstOrDefault(u => u.Id == Id);
    }

    private async Task ConfirmDelete()
    {
        await UserService.DeleteUser(Id);
        NavigationManager.NavigateTo("/users");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/users");
    }
}
